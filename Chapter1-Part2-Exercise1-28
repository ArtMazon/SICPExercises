#lang sicp

(define (square x ) (* x x))

(define (even? x ) (= (remainder x 2) 0))

(define (mil-rabit-square value n)
  (cond ((= value 0) 0)
        ((and (= (remainder (square value) n) 1) (not (= value 1)) (not (= value (- n 1)))) 0)
        (else (square value))))
                          

(define (expmod base exp n)
  (cond ((= exp 0) 1)
        ((even? exp) (remainder
                    (mil-rabit-square (expmod base (/ exp 2) n) n) 
                    n))
        (else (remainder
               (* base (expmod base (- exp 1) n))
               n))))

(define (little-fermat? a n)
  (= (expmod a (- n 1) n) 1))



(define (fooled-test-process initial-value n)
  (cond ((= initial-value n) (display "Fooled the test"))
        ((little-fermat? initial-value n) (fooled-test-process (+ initial-value 1) n))
        (else (display "Not fooled the test"))))

 
(define (fooled-test n) (fooled-test-process 1 n))

;Some primes have been tested and all of them "Fooled the test" but none of the Carmichael numbers in the book did"

(fooled-test 97)
(fooled-test 561)
(fooled-test 1105)

(define (rabbit-mile-test n)
  (little-fermat? (+ 1 (random (- n 1))) n))

(rabbit-mile-test 15)

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((rabbit-mile-test n) (fast-prime? n (- times 1)))
        (else false)))


(fast-prime? 23 10)
                   
                             
                    
        