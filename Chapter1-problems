#lang sicp

(define a 3)
(define b (+ a 1))

(+ a b (* a b))
(= a b)

(if (and (> b a) (< b (* a b)))
    b
    a)

(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))

(+ 2 ( if (> b a ) b a))

(* (cond ((> a b ) a)
         ((< a b ) b)
         (else -1))
   (+ a 1))


(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* 3 (- 6 2) (- 2 7)))

(define (square x) (* x x ))

(define (greater x y ) (if (< x y) y x))

(define (sum-of-squares x y) (+ (square x) (square y)))

(define (procedure-problem-1-3 x y z)
  (sum-of-squares (greater x y) (greater x z))) 


(procedure-problem-1-3 2 3 4)

(define (avarage x y) (/ (+ x y) 2))

(define (isgoodenough-improved? prev-guess current-guess)
  (< (abs (- prev-guess current-guess)) 0.0001))

(define (improve guess x)
  (avarage guess (/ x guess)))

(define (sqrt-iter guess x)
  (if (isgoodenough-improved? guess (improve guess x))
      (improve guess x)
      (sqrt-iter (improve guess x) x)))


(define (sqrt x)
  (sqrt-iter 1.0 x))


(sqrt (square 100))



(define (cube-iter guess x)
  (if (isgoodenough-improved? guess (improve guess))
      (improve guess)
      (cube-iter (improve guess) x)))










      

  